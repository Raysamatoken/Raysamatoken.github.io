<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>安卓10及以上的动态分区机型永久去除data加密</title>
      <link href="/2022/02/16/an-zhuo-10-ji-yi-shang-de-dong-tai-fen-qu-ji-xing-yong-jiu-qu-chu-data-jia-mi/"/>
      <url>/2022/02/16/an-zhuo-10-ji-yi-shang-de-dong-tai-fen-qu-ji-xing-yong-jiu-qu-chu-data-jia-mi/</url>
      
        <content type="html"><![CDATA[<p>首先，我们需要在目录【/vendor/etc/】中找到文件【fstab.qcom】，有的机型可能不叫这个名字，总之就是带有【fstab】字样的所有文件，都需要修改。<br><img src="https://raw.githubusercontent.com/Raysamatoken/hexo/main/img/1294855_7277df1d_0814_1101_134%401080x2400.jpeg.m.jpg"><br>打开【fstab】字样的文件，里面是这样的：<br><img src="https://raw.githubusercontent.com/Raysamatoken/hexo/main/img/1294855_2423909d_0814_1105_917%401080x2400.jpeg.m.jpg"><br>找到【userdata】这一行代码，里面有类似于这样的代码<code>fileencryption=ice,wrappedkey,keydirectory=/metadata/vold/metadata_encryption,</code>，如图：<br><img src="https://raw.githubusercontent.com/Raysamatoken/hexo/main/img/1294855_37b2d9e0_0814_1114_962%401080x2400.jpeg.m.jpg"><br>注意，每个机型可能代码不是完全一模一样，但是基本上都差不多长这个样子。然后就是删掉他【注意上图我选中的代码中，末尾包含了一个逗号的，不要删漏了】。然后就是保存，然后进行一次data格式化后，再开机时，data便不会被加密了。  </p><p>格式化data方法一：进入rec，格式化data(需要刷入yes的那种)。<br>格式化data方法二：进入fastboot(小米动态非vab机型和魅族动态分区机型)，输入命令【fastboot format userdata】和【fastboot format metadata】<br>格式化data方法三：进入fastbootd(小米动态vab机型)，输入命令【fastboot format userdata】和【fastboot format metadata】</p><p>data加密的判断方式：格式化data后，第一次开机时，读取【/vendor/etc/fstab.qcom】文件，该文件是否存在上面我们删除的代码，如果存在，则对data进行加密操作，若不存在，则不对data进行data操作。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>出厂安卓11机型解锁system分区教程</title>
      <link href="/2022/02/16/chu-han-an-zhuo-11-ji-xing-jie-suo-system-fen-qu-jiao-cheng/"/>
      <url>/2022/02/16/chu-han-an-zhuo-11-ji-xing-jie-suo-system-fen-qu-jiao-cheng/</url>
      
        <content type="html"><![CDATA[<p>出厂安卓11的设备都是vab架构，具体百度吧，我也不是很清楚vab架构。要解锁system，原理就是去除vbmeta检验就可以了，本教程就是去除vbmeta检验(简称AVB2.0检验)，已达到解锁system分区的目的，任意修改system分区。  </p><p>要去除AVB2.0检验，就要修改/vendor/etc/fstab.qcom文件，删除里面的avb字样的代码，就可以了。但是，再没解锁system分区的时候，是无法修改/vendor/etc/fstab.qcom文件的，而要解锁system分区，就是要修改/vendor/etc/fstab.qcom文件。所以，似乎陷入了一个死循环？  </p><p>所以，要解决这个问题，就只能把vendor分区提取出来，修改，然后再刷回去，就可以了。思路有了，该怎么做呢，跟着我的步伐，走  </p><p>第一步，安装termux软件：<br>pan.baidu.com/s/1-QsaVYiA596shnk6cJvZiw 提取码:4bc6  </p><p>第二步，安装解包打包工具-DNA：<br><a href="https://gitee.com/sharpeter/DNA">https://gitee.com/sharpeter/DNA</a><br><img src="https://raw.githubusercontent.com/Raysamatoken/hexo/main/img/1294855_8978425e_8439_0541%401080x2400.jpeg.m.jpg">  </p><p>第三步，提取vendor分区：pan.baidu.com/s/1QctyPF9Kuw3KAQGhylf-kA 提取码:7l7w<br>有两个sh脚本，安装个MT管理器，以root的方式执行即可提取出来，提取出来的文件在/sdcard/vendor.img。注意，如果你当前是A分区就用A分区那个，如果是B分区就用B分区那个。<br><img src="https://raw.githubusercontent.com/Raysamatoken/hexo/main/img/1294855_d8a6a061_8439_0543%401080x2400.jpeg.m.jpg"><br><img src="https://raw.githubusercontent.com/Raysamatoken/hexo/main/img/1294855_effbbc0f_8439_0545%401080x2400.jpeg.m.jpg"><br>这个vendor.img就是提取出来的镜像文件<br><img src="https://raw.githubusercontent.com/Raysamatoken/hexo/main/img/1294855_1e9e1b19_8439_0547%401080x2400.jpeg.m.jpg"><br>DNA工具输入0新建一个工程<br><img src="https://raw.githubusercontent.com/Raysamatoken/hexo/main/img/1294855_0b25eb67_8439_0549%401080x2400.jpeg.m.jpg"><br>名称任意即可。<br><img src="https://raw.githubusercontent.com/Raysamatoken/hexo/main/img/1294855_53881fac_8439_055%401080x2400.jpeg.m.jpg"><br><img src="https://raw.githubusercontent.com/Raysamatoken/hexo/main/img/1294855_1297c174_8445_0702%401080x2400.jpeg.m.jpg"><br>把提取出来的vendor.imf文件，复制到DNA工具新建的工程中：路径/data/data/com.termux/files/home/ubuntu/root/DNA/Errors_test/<br>这个Errors_test就是你刚刚新建出来的工程名字。<br><img src="https://raw.githubusercontent.com/Raysamatoken/hexo/main/img/1294855_36400bcb_8445_0704%401080x2400.jpeg.m.jpg"><br>设置文件权限为666：<br><img src="https://raw.githubusercontent.com/Raysamatoken/hexo/main/img/1294855_4d80ee01_8445_0706%401080x2400.jpeg.m.jpg"><br>第四步，解包vendor：DNA工具中，输入04，解包img文件<br><img src="https://raw.githubusercontent.com/Raysamatoken/hexo/main/img/1294855_e8780a7b_8445_0707%401080x2400.jpeg.m.jpg"><br><img src="https://raw.githubusercontent.com/Raysamatoken/hexo/main/img/1294855_69caa5a2_8445_0709%401080x2400.jpeg.m.jpg"><br><img src="https://raw.githubusercontent.com/Raysamatoken/hexo/main/img/1294855_0e768453_8445_0711%401080x2400.jpeg.m.jpg"><br>等待一点时间，解包完成。</p><p>第五步，修改vendor/etc/fstab.qcom文件，去掉里面的avb字样代码。<br>这里就是解包vendor出来的文件了，修改etc下的fstab.qcom文件，删除所有avb的字样，即可去除avb2.0检验。<br><img src="https://raw.githubusercontent.com/Raysamatoken/hexo/main/img/1294855_bde2240c_8445_0713%401080x2400.jpeg.m.jpg"><br><img src="https://raw.githubusercontent.com/Raysamatoken/hexo/main/img/1294855_66dd0e0e_8445_0716%401080x2400.jpeg.m.jpg"></p><p>我给你们演示的这个系统，是我已经去除了avb检验了的，所以里面已经没有avb字样了。</p><p>需要注意的是，这种avb字样是不需要去除的，保留即可。其他的avb字样都删除掉。其他的好像是avb,avb=system之类的。只留下这7个avb代码。<br><img src="https://raw.githubusercontent.com/Raysamatoken/hexo/main/img/1294855_cfcdc7d0_8445_0718%401080x2400.jpeg.m.jpg"><br>删除完毕之后，打包刷入就好了。<br>需要注意的是，直接打包有可能打包失败，原因是大小不对，我们只需要改一下打包大小即可。</p><p>需要注意的是，大小不是任意的，这取决于你的vendor分区大小。打包出来的大小不能＞你vendor分区的大小。那个打包大小的文件，单位是字节。1024字节=1KB。打包大小配置文件：configs/vendor_size.txt。</p><p>改好大小后，删除想要删除的文件之后，开始打包。</p><p><img src="https://raw.githubusercontent.com/Raysamatoken/hexo/main/img/1294855_f6b8d27f_8450_4131%401080x2400.jpeg.m.jpg"><br><img src="https://raw.githubusercontent.com/Raysamatoken/hexo/main/img/1294855_a6bea200_8450_4133%401080x2400.jpeg.m.jpg"><br><img src="https://raw.githubusercontent.com/Raysamatoken/hexo/main/img/1294855_d0fcb654_8450_414%401080x2400.jpeg.m.jpg"><br><img src="https://raw.githubusercontent.com/Raysamatoken/hexo/main/img/1294855_3d597402_8450_4143%401080x2400.jpeg.m.jpg">  </p><p>打包好了，接下来就是刷入到vendor分区即可。怎么刷，方法很多，以我机型为例。<br>用adb工具刷入：<br>进入fastboot模式，用fastboot reboot fastboot进入fastbootd模式，再用命令fastboot flash vendor_a 你打包出来的那个img文件</p><p>重新开机后，就可以删除修改vendor或者system分区的东西了。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>在Termux中使用LSPatch</title>
      <link href="/2022/01/31/zai-termux-zhong-shi-yong-lspatch/"/>
      <url>/2022/01/31/zai-termux-zhong-shi-yong-lspatch/</url>
      
        <content type="html"><![CDATA[<ol><li><p>安装最新版 Termux<br>下文中使用的版本为 0.118-debug 版本的 Termux，较老的版本可能无法安装 openjdk。由于签名不同，安装前请先卸载原来的Termux。<br><img src="https://raw.githubusercontent.com/Raysamatoken/hexo/main/img/20220131172646.png">  </p></li><li><p>配置 apt 源<br>首先将 Termux 的默认源地址替换为清华 tuna 源，保证速度。<br><img src="https://raw.githubusercontent.com/Raysamatoken/hexo/main/img/20220131172731.png"><br><img src="https://raw.githubusercontent.com/Raysamatoken/hexo/main/img/20220131172755.png"><br>命令：<br><code>sed -i 's@^\(deb.*stable main\)$@#\1\ndeb https://mirrors.tuna.tsinghua.edu.cn/termux/termux-packages-24 stable main@'; $PREFIX/etc/apt/sources.list</code>  </p></li><li><p>安装openjdk<br>执行 pkg install openjdk-17<br>在跑完一长串代码以后，执行java -version确认是否安装成功。<br><img src="https://raw.githubusercontent.com/Raysamatoken/hexo/main/img/20220131172913.png"><br>在开始操作之前记得赋予Termux全部文件管理权限，便于之后操作。<br>然后cd到lspatch.jar文件的所在目录即可。<br><img src="https://raw.githubusercontent.com/Raysamatoken/hexo/main/img/20220131172935.png"><br><img src="https://raw.githubusercontent.com/Raysamatoken/hexo/main/img/20220131172954.png"></p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>安卓应用lspatch注入Xposed框架</title>
      <link href="/2022/01/31/an-zhuo-ying-yong-lspatch-zhu-ru-xposed-kuang-jia/"/>
      <url>/2022/01/31/an-zhuo-ying-yong-lspatch-zhu-ru-xposed-kuang-jia/</url>
      
        <content type="html"><![CDATA[<p>Lspatch项目地址:<br><a href="https://github.com/LSPosed/LSPatch">https://github.com/LSPosed/LSPatch</a><br><img src="https://raw.githubusercontent.com/Raysamatoken/hexo/main/img/20220131171921.png">  </p><p>2 准备工作：（lspatch目前是在电脑端使用的，接下来的操作都是基于Windows11，其它版本未必不可）  </p><p>2.1 下载java11 安装并配置环境<br><img src="https://raw.githubusercontent.com/Raysamatoken/hexo/main/img/20220131172040.png">  </p><p>2.2 下载lspatch-release<br>这个版本打包bilibili实测可用（因为开发者正在开发，其它版本问题未知）  </p><p>2.3 下载需要的apk<br>包括要打包（也就是你想破解）的apk（和你想使用的xposed应用）<br>举个例子：分别为1.apk和1_xposed.apk（最好都用英文命名，防止出现问题）  </p><p>2.4 移动至同一文件夹<br>（实际上这一步骤只是用来让我们运行jar时不用输入绝对路径）<br>我们先将lspatch-release解压到一个文件夹lspatch，然后将需要破解的应用和xpose应用移动至lspatch文件夹<br><img src="https://raw.githubusercontent.com/Raysamatoken/hexo/main/img/20220131172147.png">  </p><p>3 开始打包<br>3.1 打开CMD或者PowerShell窗口<br>如果此时命令行窗口中的默认路径不是lspatch文件夹的路径，那么请更改至该路径或者将之后命令中用到的路径都改为绝对路径  </p><p>3.2 输入命令<br>输入 <code>java -jar lspatch.jar -h</code> 获取帮助信息<br><img src="https://raw.githubusercontent.com/Raysamatoken/hexo/main/img/20220131172224.png"><br>不内置xposed应用作为模块：<br><code>java -jar lspatch.jar</code> 要打包的应用的文件名.apk<br>例：<code>java -jar lspatch.jar 1.apk</code><br>内置xposed应用作为模块：<br><code>java -jar lspatch.jar</code> 要打包的应用的文件名.apk -m 要内置的xposed应用的文件名.apk<br>例：<code> java -jar lspatch.jar 1.apk -m 1_xposed.apk</code><br><img src="https://raw.githubusercontent.com/Raysamatoken/hexo/main/img/20220131172257.png"><br>特殊的命令查看帮助信息，不同版本的帮助信息不同，但命令应该是一样的，可能有增加或者减少  </p><p>4 查看文件<br>返回lspatch文件夹，这时文件夹里生成了一个打包好的apk<br><img src="https://raw.githubusercontent.com/Raysamatoken/hexo/main/img/20220131172344.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>LineageOS的addon.d机制</title>
      <link href="/2022/01/23/lineageos-de-addon-d-ji-zhi/"/>
      <url>/2022/01/23/lineageos-de-addon-d-ji-zhi/</url>
      
        <content type="html"><![CDATA[<p> 以下场景假设正在使用CM系(cm , los , havoc , crdroid , rr……)ROM。  </p><p> 也许你曾经疑惑过，为什么我塞进系统的APP在ota后就没了，但是为什么gapps在ota后还在？为什么我的面具在ota后就掉了，但另一个手机在ota后面具还在？(该问题暂不作解释，面具的刷入流程有一些奇怪的判断逻辑)  </p><p> 下面，有请辛勤的幕后工作者，模块化备份工具，backuptool登场。<br><img src="https://raw.githubusercontent.com/Raysamatoken/hexofile/main/img/20220123173824.png"><br> 首先，我们知道，Android系统更新分为A/B更新和非A/B更新。<br> A/B更新：闪存上有两套系统分区，通过update_engine把新的系统写入到另一套分区，重启后引导另一套分区。<br> 非A/B更新：闪存上只有一套系统分区，通过recovery把新的系统写入到当前的系统分区，重启后也是引导这套分区。<br><img src="https://raw.githubusercontent.com/Raysamatoken/hexofile/main/img/20220123173913.png"><br>所以，问题来了：无论哪种方案，开机后你能看到的系统分区都是在更新被覆盖过的，所以你塞进系统的APP没了似乎也很好理解(吧？)。但是！gapps也是被rec直接塞进/system里的，为什么更新完之后还在呢？咋们换个思路吧，如果在更新之前把塞进系统的东西拿出来，更新完之后再放回去是不是可以呢？对！这就是理论上backuptool要干的活。LineageOS的构建系统提供了backuptool的支持，集成了这个功能的ROM会通过backuptool[_ab].sh脚本运行/system/addon.d中的脚本。<br><img src="https://raw.githubusercontent.com/Raysamatoken/hexofile/main/img/20220123174017.png"><br>因为安卓手机有两种更新方式，所以Los提供了两种addon.d脚本支持方式：addon.d-v1(用于非A/B更新)和addon.d-v2(用于A/B更新)。addon.d-v3是在前两者基础上增加挂载product , vendor , system_ext分区<br>v1方案：<br>这里解压一个recovery卡刷包，查看刷机脚本(<code>META-INF/google/android/updater-script</code>)<br><img src="https://raw.githubusercontent.com/Raysamatoken/hexofile/main/img/20220123174057.png"><br><img src="https://raw.githubusercontent.com/Raysamatoken/hexofile/main/img/20220123174122.png"><br><img src="https://raw.githubusercontent.com/Raysamatoken/hexofile/main/img/20220123174137.png"><br>可以看到，在刷入镜像前以<code>$1=backup</code>运行<code>backuptool.sh</code>，刷入后以<code>$1=restore运行backuptool.sh</code>。(刷机包中的install目录在run_program前已被刷机脚本解压到/tmp并设置好权限)<br>现在，我们看看los提供的示例文件<code>/system/addon.d/50-lineage.sh</code><br><img src="https://raw.githubusercontent.com/Raysamatoken/hexofile/main/img/20220123174237.png"><br>其实对于addon.d脚本，并没有什么太明确的格式要求(又不是不能用.jpg滑稽)，backuptool只是提供了一组预定义的环境变量和函数(如果你的脚本引入了backuptool.functions的话)简化编写。<br><img src="https://raw.githubusercontent.com/Raysamatoken/hexofile/main/img/20220123174303.png"><br><img src="https://raw.githubusercontent.com/Raysamatoken/hexofile/main/img/20220123174317.png"><br>backuptool.functions提供了四个函数，一般来说backup_file(把文件存放到暂存区)和restore_file(把文件从暂存区拷到指定位置)是最常用的。<br><img src="https://raw.githubusercontent.com/Raysamatoken/hexofile/main/img/20220123174340.png"><br><img src="https://raw.githubusercontent.com/Raysamatoken/hexofile/main/img/20220123174402.png"><br>backuptool.sh负责备份还原及运行/system/addon.d里的脚本，同时提供$C(暂存区)$V(发行版本)$S(system分区挂载点)三个环境变量。<br>v2方案：<br>总体上说addon.d-v2和v1提供的函数和变量名是基本一样的。但有几点需要注意：<br>1：addon.d-v2的backuptool_ab.sh运行时间是在刷入完成后，由backuptool_postinstall.sh依次执行backup和restore<br><img src="https://raw.githubusercontent.com/Raysamatoken/hexofile/main/img/20220123174431.png"><br>/postinstall是aosp的标准目录，作用是如果新系统刷好后需要“预处理”，update_engine会把新的系统挂载到/postinstall再处理<br>2：在脚本中需要写上注释“# ADDONS_VERSION=2”，否则会被判定为不兼容而不执行。<br><img src="https://raw.githubusercontent.com/Raysamatoken/hexofile/main/img/20220123174507.png"><br>最后，我们回到开头的问题，看看opengapps除了把gapps放进系统以及删除冲突的软件之外还做了什么？<br>首先，在/system/addon.d里放了一个叫70-gapps.sh的文件并设置了可执行权限，把他的文件列表写到list_files函数里。并把删除冲突软件包的命令写到pre-restore阶段，把建立软链接的命令写到post-restore阶段。相当于就是把gapps重新给刷一次。<br>很明显，你随手塞进系统的APP并没有进行这种操作。所以在ota时系统不会备份和还原你的APP，于是……<br>下面，开始编写你的第一个addon.d脚本吧(括号里的字是解释，不用写)：  </p><pre class="line-numbers language-#!/sbin/sh" data-language="#!/sbin/sh"><code class="language-#!/sbin/sh">(为了兼容性，请使用/sbin/sh作为解释器)# ADDONS_VERSION=2(声明此脚本支持addon.d-v2). /tmp/backuptool.functions(为了兼容性，请引入/tmp/backuptool.functions)list_files() {cat &lt;&lt;EOFXXXXXXXXXX(请把"XXXXX"替换成你要备份的系统文件相对于/system的路径，比如你要备份/system/xbin/busybox就写xbin/busybox既可。如果是多个文件就一行一个)EOF}case "$1" inbackup)list_files | while read FILE DUMMY; dobackup_file $S/"$FILE"done;;restore)list_files | while read FILE REPLACEMENT; doR=""[ -n "$REPLACEMENT" ] &amp;&amp; R="$S/$REPLACEMENT"[ -f "$C/$S/$FILE" ] &amp;&amp; restore_file $S/"$FILE" "$R"done;;pre-backup)# Stub;;post-backup)# Stub;;pre-restore)# Stub;;post-restore)# Stub;;esac(esac下面记得留一个空行！！！)  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>写完了，保存(编码UTF-8，注意文件名要以”.sh”结尾)。挂载system读写，把文件拷进/system/addon.d里，所有者/用户组0，权限0755</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>安卓所有数据走代理软件接口</title>
      <link href="/2022/01/19/an-zhuo-suo-you-shu-ju-zou-dai-li-ruan-jian-jie-kou/"/>
      <url>/2022/01/19/an-zhuo-suo-you-shu-ju-zou-dai-li-ruan-jian-jie-kou/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-none"><code class="language-none">ip rule add from all fwmark 0x0/0x20000 uidrange 0-99999 lookup tun0 pref 11600ip route add 0.0.0.0/0 dev tun0 table tun0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>node.js npm使用国内镜像源</title>
      <link href="/2022/01/19/node.js-npm-shi-yong-guo-nei-jing-xiang-yuan/"/>
      <url>/2022/01/19/node.js-npm-shi-yong-guo-nei-jing-xiang-yuan/</url>
      
        <content type="html"><![CDATA[<h3 id="1-使用-npm"><a href="#1-使用-npm" class="headerlink" title="(1) 使用 npm"></a>(1) 使用 npm</h3><pre class="line-numbers language-none"><code class="language-none">npm config set registry https://registry.npm.taobao.org --globalnpm config set disturl https://npm.taobao.org/dist --globalnpm i<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-使用-yarn"><a href="#2-使用-yarn" class="headerlink" title="(2) 使用 yarn"></a>(2) 使用 yarn</h3><pre class="line-numbers language-none"><code class="language-none">npm config set registry https://registry.npm.taobao.org --globalnpm config set disturl https://npm.taobao.org/dist --globalnpm i -g yarnyarn<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>青龙面板快手极速版</title>
      <link href="/2022/01/16/qing-long-mian-ban-kuai-shou-ji-su-ban/"/>
      <url>/2022/01/16/qing-long-mian-ban-kuai-shou-ji-su-ban/</url>
      
        <content type="html"><![CDATA[<p>定时设置CRON：45 6-23/2 * * *<br>拉取脚本：<br><code>ql raw https://raw.githubusercontent.com/liuqi6968/-/main/ks_js.js</code><br><img src="https://raw.githubusercontent.com/Raysamatoken/hexofile/main/img/e463b36b479a-2.jpg"></p><p>###抓取快手极速版变量<br>这里采用的安卓-小黄鸟(HttpCanary),获取以下变量即可运行<br>抓包软件抓取目标网址：<br><code>https://nebula.kuaishou.com/rest/n/nebula/activity/earn/overview/basicInfo</code><br>复制全部CK内容即可！<br><img src="https://raw.githubusercontent.com/Raysamatoken/hexofile/main/img/20220116094907.png"><br>###青龙面板环境变量填写</p><pre class="line-numbers language-none"><code class="language-none">#快手极速版export kshd="kpn=NEBULA; kpf=ANDROIxxxxx复制的那一段CK，很长"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/Raysamatoken/hexofile/main/img/20220116095121.png"><br>###编辑定时运行<br><img src="https://raw.githubusercontent.com/Raysamatoken/hexofile/main/img/20220116095140.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>安卓11禁用fuse</title>
      <link href="/2022/01/15/an-zhuo-11-jin-yong-fuse/"/>
      <url>/2022/01/15/an-zhuo-11-jin-yong-fuse/</url>
      
        <content type="html"><![CDATA[<p>安卓11禁用Fuse，大幅提高IO性能<br>谷歌处于某种原因考虑，在安卓11中禁用了sdcardfs.<br>有测试指出fuse比sdcardfs慢了30多倍，显而易见的，氢11中，相册的加载速度变得异常缓慢.<br>经过对AOSP 中StorgeMangerService的分析，可利用一下prop属性简单的禁用fuse.</p><pre class="line-numbers language-none"><code class="language-none">persist.sys.fuse=falsepersist.fuse_sdcard=falsepersist.sys.fuse.default_fuse_enabled=falsepersist.sys.fflag.override.settings_fuse=falsepersist.device_config.storage_native_boot.fuse_enabled=falsero.sys.sdcardfs=true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>禁用后，mount属性如下</p><p><img src="https://raw.githubusercontent.com/Raysamatoken/hexofile/main/img/49522268010914692e38969756e2023b.jpg"></p><p>可能在部分魔改UI不起作用，MIUI测试不通过</p><p>也可以刷模块：</p><p><a href="https://raw.githubusercontent.com/Raysamatoken/hexofile/main/file/%E5%90%AF%E7%94%A8sdcardfs_b5.zip">https://raw.githubusercontent.com/Raysamatoken/hexofile/main/file/%E5%90%AF%E7%94%A8sdcardfs_b5.zip</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>hello</title>
      <link href="/2022/01/14/hello/"/>
      <url>/2022/01/14/hello/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-none"><code class="language-none">---title: typora-vue-theme主题介绍date: 2018-09-07 09:25:00author: 赵奇img: /source/images/xxx.jpgtop: truehide: falsecover: truecoverImg: /images/1.jpgpassword: 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92toc: falsemathjax: falsesummary: 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要categories: Markdowntags:  - Typora  - Markdown---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
